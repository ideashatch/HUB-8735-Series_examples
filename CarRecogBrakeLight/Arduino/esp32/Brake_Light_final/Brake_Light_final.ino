/*匯入的函式庫*/
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include <HardwareSerial.h>    //UART函式庫
#include <Arduino.h>
#include <Audio.h>             //I2S函式庫
#include <SD.h>                //SD卡函式庫
#include "FS.h"
#include <Adafruit_NeoPixel.h> //燈條函式庫
#ifdef __AVR__
#include <avr/power.h>
#endif
#include <BluetoothSerial.h>   //藍牙函式庫
#include <Wire.h>
#include <MPU6050_tockn.h>     // MPU6050函式庫

//藍牙設定
BluetoothSerial BT;            // 創建藍牙物件
char * AppData = NULL;         //app接收
String BT_Read = "0";          //藍牙資料字串

//六軸mpu6050設定
MPU6050 mpu6050(Wire);
float roll;
float pitch;
int mpuTime;
int BTmpu = 10;
int mot;

//毫米波雷達設定(PH12)
HardwareSerial PH12(1);       //宣告毫米波雷達序列傳輸1
int PH_Count = 0;             //UART接收計數器
String PH12_feedback = "";    //UART接收資料組成字串
char data;                    //UART接收字元
String Data;                  //UART測試資料完整性字串
int Direction, angle, val4, dist;  //方向、角度、距離運算變數、距離值
String val1, val2, val3, val5;
int Time;                          //毫米波雷達讀取時間變數
bool hubdetect = false;            //觸發HUB8735做動變數
bool distancecheck = false;

//音頻設定
Audio audio;                   // 創建音頻物件
#define I2S_DOUT      26       // 接模組的DIN
#define I2S_BCLK      27       // 接模組的BCK
#define I2S_LRC       25       // 接模組的LCK
#define MAX_VOL       21       // 最高音量
String vol = "21";
bool audop = false;            //音檔播放開關

//宣告SD卡模組腳位
#define SD_CS 5
#define SPI_MOSI 23
#define SPI_MISO 19
#define SPI_SCK 18

//HUB8735設定
#define HubSerial Serial2      //宣告HUB8735序列傳輸2
char str;                      //HUB8735接收字元
String HubData;                //HUB8735資料字串
int Hub_counter = 0;           //HUB8735資料記數

//機車龍頭設定
#define Brake  12              //煞車腳位
#define RightLight 32          //右方向燈腳位
#define LeftLight 33           //左方向燈腳位
int BrakeStatus = 0;           //煞車電位狀態
int RightLightStatus = 0;      //右方向燈狀態
int LeftLightStatus = 0;       //左方向燈狀態
int Accelerator = 13;          //油門腳位
int AcceleratorStatus = 0;     //油門狀態

//煞車燈設定
#define PIN 14                 //煞車燈腳位
#define NUMPIXELS 320          //亮燈數量
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
int LightTime;
int Lightcode = 0;

//大燈平時燈光半亮狀態圖案
int normal[320][3] =  {{0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*9*/{5, 0 , 0}, /*5*/{5, 0 , 0}, /*11*/{5, 0 , 0}, /*12*/{5, 0 , 0}, /*13*/{5, 0 , 0}, /*14*/{5, 0 , 0}, /*15*/{5, 0 , 0}, /*16*/{5, 0 , 0}, /*17*/{5, 0 , 0}, /*18*/{5, 0 , 0}, /*19*/{5, 0 , 0}, /*20*/{5, 0 , 0}, /*21*/{5, 0 , 0}, /*22*/{5, 0 , 0}, /*23*/{5, 0, 0}, /*24*/{5, 0, 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //34-71行，38行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*44*/{5, 0 , 0}, /*45*/{5, 0 , 0}, /*46*/{5, 0 , 0}, /*47*/{5, 0 , 0}, /*48*/{5, 0 , 0}, /*49*/{5, 0 , 0}, /*50*/{5, 0 , 0}, /*51*/{5, 0 , 0}, /*52*/{5, 0 , 0}, /*53*/{5, 0 , 0}, /*54*/{5, 0, 0}, /*55*/{5, 0 , 0}, /*56*/{5, 0 , 0}, /*57*/{5, 0 , 0},/*58*/{5, 0 , 0}, /*59*/{5, 0 , 0}, /*60*/{5, 0 , 0}, /*61*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //72-113行，42行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*83*/{5, 0 , 0}, /*84*/{5, 0 , 0}, /*85*/{5, 0 , 0}, /*86*/{5, 0 , 0}, /*87*/{5, 0 , 0}, /*88*/{5, 0 , 0}, /*89*/{5, 0 , 0}, /*90*/{5, 0 , 0}, /*91*/{5, 0 , 0}, /*92*/{5, 0 , 0}, /*93*/{5, 0 , 0}, /*94*/{5, 0 , 0}, /*95*/{5, 0 , 0}, /*96*/{5, 0 , 0}, /*97*/{5, 0 , 0}, /*98*/{5, 0 , 0}, /*99*/{5, 0 , 0}, /*50*/{5, 0 , 0}, /*51*/{5, 0 , 0}, /*52*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //114-159行，46行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*126*/{5, 0 , 0}, /*127*/{5, 0 , 0}, /*128*/{5, 0 , 0}, /*129*/{5, 0 , 0}, /*130*/{5, 0 , 0},/*131*/{5, 0 , 0}, /*132*/{5, 0 , 0}, /*133*/{5, 0 , 0}, /*134*/{5, 0 , 0}, /*135*/{5, 0 , 0}, /*136*/{5, 0 , 0}, /*137*/{5, 0 , 0}, /*138*/{5, 0 , 0}, /*139*/{5, 0 , 0}, /*140*/{5, 0 , 0}, /*141*/{5, 0 , 0},/*142*/{5, 0 , 0}, /*143*/{5, 0 , 0}, /*144*/{5, 0 , 0}, /*145*/{5, 0 , 0}, /*146*/{5, 0 , 0}, /*147*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //160-205行，46行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*172*/{5, 0 , 0}, /*173*/{5, 0 , 0}, /*174*/{5, 0 , 0}, /*175*/{5, 0 , 0}, /*176*/{5, 0 , 0}, /*177*/{5, 0 , 0}, /*178*/{5, 0 , 0}, /*179*/{5, 0 , 0}, /*180*/{5, 0 , 0}, /*181*/{5, 0 , 0}, /*182*/{5, 0 , 0}, /*183*/{5, 0 , 0}, /*184*/{5, 0 , 0}, /*185*/{5, 0 , 0}, /*186*/{5, 0 , 0}, /*187*/{5, 0 , 0}, /*188*/{5, 0 , 0}, /*189*/{5, 0 , 0}, /*190*/{5, 0 , 0}, /*191*/{5, 0 , 0}, /*192*/{5, 0 , 0}, /*193*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //206-247行，42行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*217*/{5, 0 , 0}, /*218*/{5, 0 , 0}, /*219*/{5, 0 , 0}, /*220*/{5, 0 , 0}, /*221*/{5, 0 , 0}, /*222*/{5, 0 , 0}, /*223*/{5, 0 , 0}, /*224*/{5, 0 , 0}, /*25*/{5, 0 , 0}, /*226*/{5, 0 , 0}, /*227*/{5, 0 , 0}, /*228*/{5, 0 , 0}, /*229*/{5, 0 , 0}, /*230*/{5, 0 , 0}, /*231*/{5, 0 , 0}, /*232*/{5, 0 , 0}, /*233*/{5, 0 , 0}, /*234*/{5, 0 , 0}, /*235*/{5, 0 , 0}, /*236*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //248-285行，38行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*58*/{5, 0 , 0}, /*59*/{5, 0 , 0}, /*260*/{5, 0 , 0}, /*261*/{5, 0 , 0}, /*262*/{5, 0 , 0}, /*263*/{5, 0 , 0}, /*264*/{5, 0 , 0}, /*265*/{5, 0 , 0}, /*266*/{5, 0 , 0}, /*267*/{5, 0 , 0}, /*268*/{5, 0 , 0}, /*269*/{5, 0 , 0}, /*270*/{5, 0 , 0}, /*271*/{5, 0 , 0}, /*272*/{5, 0 , 0}, /*273*/{5, 0 , 0}, /*274*/{5, 0 , 0}, /*275*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //286-319行，34行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*295*/{5, 0 , 0}, /*296*/{5, 0 , 0}, /*297*/{5, 0 , 0}, /*298*/{5, 0 , 0}, /*299*/{5, 0 , 0}, /*300*/{5, 0 , 0}, /*301*/{5, 0 , 0}, /*302*/{5, 0 , 0}, /*303*/{5, 0 , 0}, /*304*/{5, 0 , 0}, /*305*/{5, 0 , 0}, /*306*/{5, 0 , 0}, /*307*/{5, 0 , 0}, /*308*/{5, 0 , 0}, /*309*/{5, 0 , 0}, /*35*/{5, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}
};

//大燈燈珠陣列 八x
int brak[] = {9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 44, 45, 46, 47, 48, 49, 50,
              51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,
              95, 96, 97, 98, 99, 100, 101, 102, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
              138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 172, 173, 174, 175, 176, 177, 178, 179, 180,
              181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 217, 218, 219, 220, 221, 222,
              223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 258, 259, 260, 261, 262,
              263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 295, 296, 297, 298, 299, 300,
              301, 302, 303, 304, 305, 306, 307, 308, 309, 310
             };
// 六x  100
int sixx[] = {61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 147, 146, 145, 144, 143, 
              142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 172, 173, 174, 
              175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 236, 
              235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 258, 
              259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275};

//四x  83
int fourx[] = {83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 147, 146, 145, 
               144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 172, 
               173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 
               193, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217};

//二x    44
int twox[] = {147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 
              172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193};
              
//大燈煞車燈光狀態圖案                    0-33行，34行
int motobrake[320][3] = {{0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*9*/{255, 0 , 0}, /*10*/{255, 0 , 0}, /*11*/{255, 0 , 0}, /*12*/{255, 0 , 0}, /*13*/{255, 0 , 0}, /*14*/{255, 0 , 0}, /*15*/{255, 0 , 0}, /*16*/{255, 0 , 0}, /*17*/{255, 0 , 0}, /*18*/{255, 0 , 0}, /*19*/{255, 0 , 0}, /*20*/{255, 0 , 0}, /*21*/{255, 0 , 0}, /*22*/{255, 0 , 0}, /*23*/{255, 0, 0}, /*24*/{255, 0, 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //34-71行，38行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*44*/{255, 0 , 0}, /*45*/{255, 0 , 0}, /*46*/{255, 0 , 0}, /*47*/{255, 0 , 0}, /*48*/{255, 0 , 0}, /*49*/{255, 0 , 0}, /*50*/{255, 0 , 0}, /*51*/{255, 0 , 0}, /*52*/{255, 0 , 0}, /*53*/{255, 0 , 0}, /*54*/{255, 0, 0}, /*55*/{255, 0 , 0}, /*56*/{255, 0 , 0}, /*57*/{255, 0 , 0},/*58*/{255, 0 , 0}, /*59*/{255, 0 , 0}, /*60*/{255, 0 , 0}, /*61*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //72-113行，42行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*83*/{255, 0 , 0}, /*84*/{255, 0 , 0}, /*85*/{255, 0 , 0}, /*86*/{255, 0 , 0}, /*87*/{255, 0 , 0}, /*88*/{255, 0 , 0}, /*89*/{255, 0 , 0}, /*90*/{255, 0 , 0}, /*91*/{255, 0 , 0}, /*92*/{255, 0 , 0}, /*93*/{255, 0 , 0}, /*94*/{255, 0 , 0}, /*95*/{255, 0 , 0}, /*96*/{255, 0 , 0}, /*97*/{255, 0 , 0}, /*98*/{255, 0 , 0}, /*99*/{255, 0 , 0}, /*100*/{255, 0 , 0}, /*101*/{255, 0 , 0}, /*102*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //114-159行，46行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*126*/{255, 0 , 0}, /*127*/{255, 0 , 0}, /*128*/{255, 0 , 0}, /*129*/{255, 0 , 0}, /*130*/{255, 0 , 0},/*131*/{255, 0 , 0}, /*132*/{255, 0 , 0}, /*133*/{255, 0 , 0}, /*134*/{255, 0 , 0}, /*135*/{255, 0 , 0}, /*136*/{255, 0 , 0}, /*137*/{255, 0 , 0}, /*138*/{255, 0 , 0}, /*139*/{255, 0 , 0}, /*140*/{255, 0 , 0}, /*141*/{255, 0 , 0},/*142*/{255, 0 , 0}, /*143*/{255, 0 , 0}, /*144*/{255, 0 , 0}, /*145*/{255, 0 , 0}, /*146*/{255, 0 , 0}, /*147*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //160-205行，46行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*172*/{255, 0 , 0}, /*173*/{255, 0 , 0}, /*174*/{255, 0 , 0}, /*175*/{255, 0 , 0}, /*176*/{255, 0 , 0}, /*177*/{255, 0 , 0}, /*178*/{255, 0 , 0}, /*179*/{255, 0 , 0}, /*180*/{255, 0 , 0}, /*181*/{255, 0 , 0}, /*182*/{255, 0 , 0}, /*183*/{255, 0 , 0}, /*184*/{255, 0 , 0}, /*185*/{255, 0 , 0}, /*186*/{255, 0 , 0}, /*187*/{255, 0 , 0}, /*188*/{255, 0 , 0}, /*189*/{255, 0 , 0}, /*190*/{255, 0 , 0}, /*191*/{255, 0 , 0}, /*192*/{255, 0 , 0}, /*193*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //206-247行，42行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*217*/{255, 0 , 0}, /*218*/{255, 0 , 0}, /*219*/{255, 0 , 0}, /*220*/{255, 0 , 0}, /*221*/{255, 0 , 0}, /*222*/{255, 0 , 0}, /*223*/{255, 0 , 0}, /*224*/{255, 0 , 0}, /*225*/{255, 0 , 0}, /*226*/{255, 0 , 0}, /*227*/{255, 0 , 0}, /*228*/{255, 0 , 0}, /*229*/{255, 0 , 0}, /*230*/{255, 0 , 0}, /*231*/{255, 0 , 0}, /*232*/{255, 0 , 0}, /*233*/{255, 0 , 0}, /*234*/{255, 0 , 0}, /*235*/{255, 0 , 0}, /*236*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //248-285行，38行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*258*/{255, 0 , 0}, /*259*/{255, 0 , 0}, /*260*/{255, 0 , 0}, /*261*/{255, 0 , 0}, /*262*/{255, 0 , 0}, /*263*/{255, 0 , 0}, /*264*/{255, 0 , 0}, /*265*/{255, 0 , 0}, /*266*/{255, 0 , 0}, /*267*/{255, 0 , 0}, /*268*/{255, 0 , 0}, /*269*/{255, 0 , 0}, /*270*/{255, 0 , 0}, /*271*/{255, 0 , 0}, /*272*/{255, 0 , 0}, /*273*/{255, 0 , 0}, /*274*/{255, 0 , 0}, /*275*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0},
  //286-319行，34行
  {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, /*295*/{255, 0 , 0}, /*296*/{255, 0 , 0}, /*297*/{255, 0 , 0}, /*298*/{255, 0 , 0}, /*299*/{255, 0 , 0}, /*300*/{255, 0 , 0}, /*301*/{255, 0 , 0}, /*302*/{255, 0 , 0}, /*303*/{255, 0 , 0}, /*304*/{255, 0 , 0}, /*305*/{255, 0 , 0}, /*306*/{255, 0 , 0}, /*307*/{255, 0 , 0}, /*308*/{255, 0 , 0}, /*309*/{255, 0 , 0}, /*310*/{255, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}, {0, 0 , 0}
};


/*減速------------------------------------------------------------------------------------------------------------------------------------*/
//減速動畫圖案                    0-33行，34行
int motoslow[320][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*14*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*19*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //34-71行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*51*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, /*54*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //72-113行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*90*/{255, 255, 0}, {0, 0, 0}, /*92*/{255, 255, 0}, /*93*/{255, 255, 0}, {0, 0, 0}, /*95*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //114-159行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*126*/{255, 255, 0}, /*127*/{255, 255, 0}, /*128*/{255, 255, 0}, /*129*/{255, 255, 0}, /*130*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*135*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, /*138*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*143*/{255, 255, 0}, /*144*/{255, 255, 0}, /*145*/{255, 255, 0}, /*146*/{255, 255, 0}, /*147*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //160-205行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*180*/{255, 255, 0}, {0, 0, 0}, /*182*/{255, 255, 0}, /*183*/{255, 255, 0}, {0, 0, 0}, /*185*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //206-247行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*224*/{255, 255, 0}, {255, 255, 0}, {0, 0, 0}, /*227*/{255, 255, 0}, {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //248-285行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {255, 255, 0}, /*267*/{255, 255, 0}, /*268*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //286-319行，34行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};

//減速燈珠動畫陣列
int slow1[] = {126, 127, 128, 129, 130, 143, 144, 145, 146, 147};
int slow2[] = {14, 19, 51, 54, 92, 93, 126, 127, 128, 129, 130, 143, 144, 145, 146, 147};
int slow3[] = {14, 19, 51, 54, 90, 92, 93, 95, 126, 127, 128, 129, 130, 135, 138, 143, 144, 145, 146, 147, 182, 183};
int slow4[] = {14, 19, 51, 54, 90, 92, 93, 95, 126, 127, 128, 129, 130, 135, 138, 143, 144, 145, 146, 147, 180, 182, 183, 185, 225, 228, 266, 267};
int slow5[] = {14, 19, 51, 54, 90, 92, 93, 95, 135, 138, 180, 182, 183, 185, 225, 228, 266, 267};

int slowTime; //減速動畫時間
int slo = 0;  //刷新減速動畫變數


/*加速----------------------------------------------------------------------------------------------------------------------------------*/
//加速動畫圖案            0-33行，34行
int motoraccel[320][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //34-71行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*52*/{255, 255, 0}, /*53*/{255, 255, 0}, /*54*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*62*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //72-113行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*84*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*90*/{255, 255, 0}, /*91*/{255, 255, 0}, {0, 0, 0}, /*93*/{255, 255, 0}, /*94*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*101*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //114-159行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},/*126*/ {255, 255, 0}, /*127*/{255, 255, 0},/*128*/ {255, 255, 0}, /*129*/{255, 255, 0}, /*130*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*134*/{255, 255, 0}, /*135*/{255, 255, 0}, /*136*/{255, 255, 0}, /*137*/{255, 255, 0}, /*138*/{255, 255, 0}, /*139*/{255, 255, 0}, /*140*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, /*143*/{255, 255, 0}, /*144*/{255, 255, 0}, /*145*/{255, 255, 0},/*146*/ {255, 255, 0}, /*147*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //160-205行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*174*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*180*/{255, 255, 0}, /*181*/{255, 255, 0}, {0, 0, 0}, /*183*/{255, 255, 0}, /*184*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*191*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //206-247行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*216*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*223*/{255, 255, 0}, /*224*/{255, 255, 0}, /*225*/{255, 255, 0}, /*226*/{255, 255, 0}, /*227*/{255, 255, 0}, /*228*/{255, 255, 0}, /*229*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*235*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //248-285行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*265*/{255, 255, 0}, /*266*/{255, 255, 0}, {0, 0, 0}, /*268*/{255, 255,  0}, /*269*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //286-319行，34行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*299*/{255, 255, 0},/*300*/ {255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},/*304*/{255, 255, 0}, /*305*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};

//加速燈珠動畫陣列
int accel1[] = {84, 101, 126, 127, 128, 129, 130, 143, 144, 145, 146, 147, 174, 191};
int accel2[] = {84, 101, 126, 127, 128, 129, 130, 143, 144, 145, 146, 147, 174, 191, 226, 227, 265, 268, 300, 305};
int accel3[] = {84, 101, 126, 127, 128, 129, 130, 136, 137, 143, 144, 145, 146, 147, 174, 181, 184, 191, 224, 226, 227, 229, 265, 268, 300, 305};
int accel4[] = {52, 53, 84, 91, 94, 101, 126, 127, 128, 129, 130, 134, 136, 137, 139, 143, 144, 145, 146, 147, 174, 181, 184, 191, 224, 226, 227, 229, 265, 268, 300, 305};
int accel5[] = {52, 53, 91, 94, 134, 136, 137, 139, 181, 184, 223, 225, 226, 224, 227, 229, 265, 268, 300, 305};

int accTime;   //加速動畫時間
int acc = 0;   //刷新加速動畫變數

/*向左偏移-----------------------------------------------------------------------------------------------------------------------------------*/
// 左偏動畫圖案                0-33行，34行
int leftoffset[320][3] = {{255, 255, 0}, /*01*/{255, 255, 0}, /*02*/{255, 255, 0}, /*03*/{255, 255, 0}, /*04*/{255, 255, 0}, /*05*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //34-71行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*65*/{255, 255, 0}, /*66*/{255, 255, 0}, /*67*/{255, 255, 0}, /*68*/{255, 255, 0}, /*69*/{255, 255, 0}, /*70*/{255, 255, 0}, {0, 0, 0},
  //72-113行，42行
  {0, 0, 0}, {0, 0, 0}, /*74*/{255, 255, 0}, /*75*/{255, 255, 0}, /*76*/{255, 255, 0}, /*77*/{255, 255, 0}, /*78*/{255, 255, 0}, /*79*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //114-159行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*151*/{255, 255, 0}, /*152*/{255, 255, 0}, /*153*/{255, 255, 0}, /*154*/{255, 255, 0}, /*155*/{255, 255, 0}, /*156*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //160-205行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*163*/{255, 255, 0}, /*164*/{255, 255, 0}, /*165*/{255, 255, 0}, /*166*/{255, 255, 0}, /*167*/{255, 255, 0}, /*168*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //206-247行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*240*/{255, 255, 0}, /*241*/{255, 255, 0}, /*242*/{255, 255, 0}, /*243*/{255, 255, 0}, /*244*/{255, 255, 0}, /*245*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0},
  //248-285行，38行
  {0, 0, 0}, /*249*/{255, 255, 0}, /*250*/{255, 255, 0}, /*251*/{255, 255, 0}, /*252*/{255, 255, 0}, /*253*/{255, 255, 0}, /*254*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //286-319行，34行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*314*/{255, 255, 0}, /*315*/{255, 255, 0}, /*316*/{255, 255, 0}, /*317*/{255, 255, 0}, /*318*/{255, 255, 0},/*319*/{255, 255, 0}
};

//左偏燈珠動畫陣列
int lo1[] = {4, 5, 65, 66, 78, 79, 151, 152, 167, 168, 240, 241, 253, 254, 314, 315};
int lo2[] = {2, 3, 67, 68, 76, 77, 153, 154, 165, 166, 242, 243, 251, 252, 316, 317};
int lo3[] = {0, 1, 69, 70, 74, 75, 155, 156, 163, 164, 244, 245, 249, 250, 318, 319};
int lo4[] = {0, 1, 2, 3, 4, 5, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 78, 79, 151, 152, 153, 154, 155, 156, 163, 164, 165, 166, 167, 168, 240, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 254, 314, 315, 316, 317, 318, 319};

int loTime;  //左偏動畫時間
int lo = 0;  //刷新左偏動畫變數

/*向右偏移-----------------------------------------------------------------------------------------------------------------------------------*/
// 右偏動畫圖案                0-33行，34行
int rightoffset[320][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*28*/{255, 255, 0}, /*29*/{255, 255, 0}, /*30*/{255, 255, 0}, /*31*/{255, 255, 0}, /*32*/{255, 255, 0},/*33*/{255, 255, 0},
  //34-71行，38行
  {0, 0, 0}, /*35*/{255, 255, 0}, /*36*/{255, 255, 0}, /*37*/{255, 255, 0}, /*38*/{255, 255, 0}, /*39*/{255, 255, 0}, /*40*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //72-113行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*106*/{255, 255, 0}, /*107*/{255, 255, 0}, /*108*/{255, 255, 0}, /*109*/{255, 255, 0}, /*110*/{255, 255, 0}, /*111*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0},
  //114-159行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*117*/{255, 255, 0}, /*118*/{255, 255, 0}, /*119*/{255, 255, 0}, /*120*/{255, 255, 0}, /*120*/{255, 255, 0}, /*121*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //160-205行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*197*/{255, 255, 0}, /*198*/{255, 255, 0}, /*199*/{255, 255, 0}, /*200*/{255, 255, 0}, /*201*/{255, 255, 0}, /*202*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //206-247行，42行
  {0, 0, 0}, {0, 0, 0}, /*208*/{255, 255, 0}, /*209*/{255, 255, 0}, /*210*/{255, 255, 0}, /*211*/{255, 255, 0}, /*212*/{255, 255, 0}, /*213*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //248-285行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*279*/{255, 255, 0}, /*280*/{255, 255, 0}, /*281*/{255, 255, 0}, /*282*/{255, 255, 0}, /*283*/{255, 255, 0}, /*284*/{255, 255, 0}, {0, 0, 0},
  //286-319行，34行
  /*286*/{255, 255, 0}, /*287*/{255, 255, 0}, /*288*/{255, 255, 0}, /*289*/{255, 255, 0}, /*290*/{255, 255, 0}, /*291*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};

//右偏燈珠動畫陣列
int ro1[] = {28, 29, 39, 40, 106, 107, 121, 122, 197, 198, 212, 213, 279, 280, 290, 291};
int ro2[] = {30, 31, 37, 38, 108, 109, 119, 120, 199, 200, 210, 211, 281, 282, 288, 289};
int ro3[] = {32, 33, 35, 36, 110, 111, 117, 118, 201, 202, 208, 209, 283, 284, 286, 287};
int ro4[] = {28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 197, 198, 199, 200, 201, 202, 208, 209, 210, 211, 212, 213, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291};

int roTime;  //右偏動畫時間
int ro = 0;  //刷新右偏動畫變數


/*左轉-----------------------------------------------------------------------------------------------------------------------------------*/
//左轉圖案                       0-33行，34行
int left[320][3] = {/*0*/{255, 255, 0}, /*01*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
                         //34-71行，38行
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*68*/{255, 255, 0}, /*69*/{255, 255, 0}, /*70*/{255, 255, 0}, /*71*/{255, 255, 0},
//72-113行，42行
/*72*/{255, 255, 0}, /*73*/{255, 255, 0}, /*74*/{255, 255, 0}, /*75*/{255, 255, 0}, /*76*/{255, 255, 0}, /*77*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
//114-159行，46行
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*152*/{255, 255, 0}, /*153*/{255, 255, 0}, /*154*/{255, 255, 0}, /*155*/{255, 255, 0}, /*156*/{255, 255, 0}, /*157*/{255, 255, 0}, /*158*/{255, 255, 0}, /*159*/{255, 255, 0},
//160-205行，46行
/*160*/{255, 255, 0}, /*161*/{255, 255, 0}, /*162*/{255, 255, 0}, /*163*/{255, 255, 0}, /*164*/{255, 255, 0}, /*165*/{255, 255, 0}, /*166*/{255, 255, 0}, /*167*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
//206-247行，42行
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*242*/{255, 255, 0}, /*243*/{255, 255, 0}, /*244*/{255, 255, 0}, /*245*/{255, 255, 0}, /*246*/{255, 255, 0}, /*247*/{255, 255, 0},
//248-285行，38行
/*248*/{255, 255, 0}, /*249*/{255, 255, 0}, /*250*/{255, 255, 0}, /*251*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
//286-319行，34行
{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*318*/{255, 255, 0},/*319*/{255, 255, 0}
                   };
//左轉燈珠陣列
int le1[] = {0, 1, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 318, 319};

int leTime;  //左轉動畫時間
int le = 0;  //刷新左轉動畫變數


/*右轉-----------------------------------------------------------------------------------------------------------------------------------*/
//右轉圖案                     0-33行，34行
int right[320][3] = {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*32*/{255, 255, 0},/*33*/{255, 255, 0},
  //34-71行，38行
  /*34*/{255, 255, 0}, /*35*/{255, 255, 0}, /*36*/{255, 255, 0}, /*37*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //72-113行，42行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*108*/{255, 255, 0}, /*109*/{255, 255, 0}, /*110*/{255, 255, 0}, /*111*/{255, 255, 0}, /*112*/{255, 255, 0}, /*113*/{255, 255, 0},
  //114-159行，46行
  /*114*/{255, 255, 0}, /*115*/{255, 255, 0}, /*116*/{255, 255, 0}, /*117*/{255, 255, 0},/*118*/ {255, 255, 0}, /*119*/{255, 255, 0}, /*120*/{255, 255, 0}, /*121*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //160-205行，46行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*198*/{255, 255, 0}, /*199*/{255, 255, 0}, /*200*/{255, 255, 0}, /*201*/{255, 255, 0}, /*202*/{255, 255, 0}, /*203*/{255, 255, 0}, /*204*/{255, 255, 0}, /*205*/{255, 255, 0},
  //206-247行，42行
  /*206*/{255, 255, 0}, /*207*/{255, 255, 0}, /*208*/{255, 255, 0}, /*209*/{255, 255, 0}, /*210*/{255, 255, 0}, /*211*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
  //248-285行，38行
  {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, /*282*/{255, 255, 0}, /*283*/{255, 255, 0}, /*284*/{255, 255, 0}, /*285*/{255, 255, 0},
  //286-319行，34行
  /*286*/{255, 255, 0}, /*287*/{255, 255, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};

//右轉燈珠陣列
int re1[] = {32, 33, 34, 35, 36, 37, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 282, 283, 284, 285, 286, 287};

int reTime;  //右轉動畫時間
int re = 0;  //刷新右轉動畫變數

String animation = "";
bool clearlight = false;
/*volatile bool uartInterruptEnabled = false; //控制UART中斷是否啟用

  void interruptHandler() {
  // 當煞車按鈕引腳狀態被按下時
  if (digitalRead(Brake) == LOW ) {
    //禁用UART中断
    uartInterruptEnabled = false;
  } else {
    //反之，启用UART中断
    uartInterruptEnabled = true;
  }
  }

  void BrakeLight(void *pvParam) {
  while(1){
  //當煞車按下時
  if (BrakeStatus == LOW) {
    //右方向燈判斷
    if (RightLightStatus == LOW) {
      //turnrightbrake();   //煞車+右轉動畫
      Serial.print();
    }
    //左方向燈判斷
    else if (LeftLightStatus == LOW) {
      turnleftbrake();    //煞車+左轉動畫
    }
    //偏移判斷
    else {
      if (pitch >= 10) {    //當六軸偏移大於10度
        leanrightbrake();   //煞車+右偏動畫
      }
      else if (pitch <= -20) { //當六軸偏移小於-20度
        leanleftbrake();    //煞車+左偏動畫
      }
      else {                //亮大燈平時全亮動畫
        for (int i = 0; i < 48; i++) {
          pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 48; i++) {
          pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 40; i++) {
          pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 40; i++) {
          pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 152; i++) {
          pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
        }
        pixels.show();
      }
    }
  }
  //當煞車未被按下時
  else if (BrakeStatus == HIGH) {
    //右方向燈判斷
    if (RightLightStatus == LOW) {
      turnrightnormal();   //半亮+右轉動畫
    }
    else if (LeftLightStatus == LOW) {
      turnleftnormal();   //半亮+左轉動畫
    }
    //偏移判斷
    else {
      if (pitch >= 10) {    //當六軸偏移大於10度
        leanrightnormal();  //半亮+右偏動畫
      }
      else if (pitch <= -20) {  //當六軸偏移小於-20度
        leanleftnormal();   //半亮+左偏動畫
      }
      else {                //亮大燈平時半亮動畫
        for (int i = 0; i < 48; i++) {
          pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 48; i++) {
          pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 40; i++) {
          pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 40; i++) {
          pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
        }
        for (int i = 0; i < 152; i++) {
          pixels.setPixelColor(brak[i], pixels.Color(normal[brak[i]][0], normal[brak[i]][1], normal[brak[i]][2]));
        }
        pixels.show();
      }
    }
  }
  vTaskDelay(100);
  }
  }*/
bool biglight = false;
bool mpulight = false;
bool ladarop = true;
int R = 255;
int G = 21;
int B = 0;
bool Auto = false;
String ab = "";

void setup() {
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  Serial.begin(115200);
  delay(10);
  HubSerial.begin(115200, SERIAL_8N1, 16, 17);  //啟用HUB8735 UART傳輸
  delay(10);
  PH12.begin(115200, SERIAL_8N1, 15, 4);        //啟用毫米波雷達 UART傳輸
  delay(10);
  pinMode(Brake, INPUT_PULLUP);                 //煞車腳位設定
  pinMode(RightLight, INPUT_PULLUP);            //右方向燈腳位設定
  pinMode(LeftLight, INPUT_PULLUP);             //左方向燈腳位設定
  pinMode(Accelerator, INPUT);                  //油門腳位設定
  pixels.begin();                               //開啟燈條傳輸
  pinMode(SD_CS, OUTPUT);                       //SD卡
  digitalWrite(SD_CS, HIGH);
  SPI.begin(SPI_SCK, SPI_MISO, SPI_MOSI);       //啟用SPI傳輸
  SD.begin(SD_CS);                              //啟用SD卡
  //audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT); //啟用I2S音頻模組
  //audio.setVolume(vol.toInt());                 //音量大小0...21
  BT.begin("BTBrakeLight");                       //藍牙啟用
  delay(10);
  Wire.begin();
  mpu6050.begin();                              //啟用六軸
  mpu6050.calcGyroOffsets(true);                //校准陀螺仪
  //xTaskCreate(BrakeLight, "BrakeLight", 1000, NULL, 2, NULL);  //亮燈副程式
  //attachInterrupt(Brake, interruptHandler, CHANGE);            //當煞車按鈕被按下時持觸發中斷
}

void loop() {
  /*BrakeStatus = digitalRead(Brake);
    RightLightStatus = digitalRead(RightLight);
    LeftLightStatus = digitalRead(LeftLight);
    AcceleratorStatus = analogRead(Accelerator);*/
  while (BT.available()) {              // 藍牙接收
    BT_Read = BT.readString();          // BT_Char=藍牙讀到的資料
    Serial.println(BT_Read);            // 列印出讀到的資料
  }
  if (animation != BT_Read && BT_Read != "") {
    animation = BT_Read;
    clearlight = false;
  }
  if(BT_Read == "1,255"){
    R = 255;
    G = 51;
    
  }
  else if(BT_Read == "1,128"){
    R = 132;
    G = 30;
    
  } 
  else if(BT_Read == "1,50"){
    R = 66;
    G = 15;
  
  }
  if (BT_Read == "2,7") {
    audio.setVolume(7);
  }
  else if (BT_Read == "2,14") {
    audio.setVolume(14);
  }
  else if (BT_Read == "2,21") {
    audio.setVolume(21);
  }
  else if (BT_Read == "3,5") {
    mot = 10;
  }
  else if (BT_Read == "3,10") {
    mot = 15;
  }
  else if (BT_Read == "3,15") {
    mot = 20;
  }
  else if (BT_Read == "4,1") {
    ladarop = true;
  }
  else if (BT_Read == "4,2") {
    ladarop = false;
  }
  else if (BT_Read == "4,7") {
    distancecheck = false;
  }
  else if (BT_Read == "4,14") {
    distancecheck = true;
  }
  else if (BT_Read == "5") {
    Auto = false;
    for (int i = 0; i < NUMPIXELS; i++) {
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    }
    pixels.show();
    for (int i = 0; i < 152; i++) {
      pixels.setPixelColor(brak[i], pixels.Color(R, 0, 0));
    }
    pixels.show();
    
  }
  else if (BT_Read == "6") {
    for (int i = 0; i < NUMPIXELS; i++) {
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    }
    pixels.show();
    for (int i = 0; i < 152; i++) {
      pixels.setPixelColor(brak[i], pixels.Color(normal[brak[i]][0], normal[brak[i]][1], normal[brak[i]][2]));
    }
    pixels.show();
    biglight = true;
  }
  else if (BT_Read == "7") {
    for (int i = 0; i < 152; i++) {
      pixels.setPixelColor(brak[i], pixels.Color(0, 0, 0));
    }
    pixels.show();
    biglight = false;
  }
  else if (animation == "8") {
    if(Auto != true){
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    speedup();
    }
  }
  else if (animation == "9") {
    if(Auto != true){
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    speeddown();
    }
  }
  else if (animation == "10,5" || animation == "10,10" || animation == "10,15") {
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    if(biglight){
      leanleftnormal();
    }
    else{
      leanleft();
    }
  }
  else if (animation == "11,5" || animation == "11,10" || animation == "11,15") {
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    if(biglight){
      leanrightnormal();
    }
    else{
      leanright();
    }
  }
  else if (animation == "12") {
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    if(biglight){
      turnleftnormal();
    }
    else{
      turnleft();
    }
  }
  else if(BT_Read == "13"){
    for (int i = 0; i < NUMPIXELS; i++) {
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));
    }
    pixels.show();
  }
  else if (animation == "14"){
    if (clearlight == false) {
      for (int i = 0; i < NUMPIXELS; i++) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
      }
      clearlight = true;
    }
    if(biglight){
      turnrightnormal();
    }
    else{
      turnright();
    }
  }
    if(pitch >= mot){
      mpulight = false;
      if(biglight){
        leanrightnormal();
      }
      else if(biglight == false){
        leanright();
      }
    }
    else if(pitch <= (mot*-1)-10){
      mpulight = false;
      if(biglight){
        leanleftnormal();
      }
      else if(biglight == false){
        leanleft();
      }
    }
    else {                //亮大燈平時半亮動畫
      if (mpulight == false) {
        if(pitch >=-5 && pitch <= 5){
          for (int i = 0; i < NUMPIXELS; i++) {
           pixels.setPixelColor(i, pixels.Color(0, 0, 0));
          }
          pixels.show();
          mpulight = true;
        }
        if(biglight){
          for (int i = 0; i < 152; i++) {
            pixels.setPixelColor(brak[i], pixels.Color(normal[brak[i]][0], normal[brak[i]][1], normal[brak[i]][2]));
          }
          pixels.show();
        }
      }   
    }    
  motion();         //六軸偵測副程式
  SpotDetect();     //毫米波雷達偵測副程式
  Detect();         //HUB8735辨識副程式
  ab = HubData.substring(0,1);
  if(BT_Read != "5"){
  if(Auto){
      for(int a = 0;a < 3;a++){
        for (int i = 0; i < 152; i++) {
          pixels.setPixelColor(brak[i], pixels.Color(normal[brak[i]][0], normal[brak[i]][1], normal[brak[i]][2]));
        }
        pixels.show();
        delay(300);
        for (int i = 0; i < 152; i++) {
         pixels.setPixelColor(brak[i], pixels.Color(0, 0, 0));
        }
        pixels.show();
        delay(300);
      }
    }
  }
  if(dist == 0 && ab != "1" && ab != "2" && ab != "3" && ab != "4"){
    Auto = false;
  }
  //清空資料
  PH_Count = 0;
  PH12_feedback = "";
  PH12.flush(PH12_feedback);
  Data = "";
  val3 = "";
  dist = 0;
  Hub_counter = 0;  //清空HUB8735計數器
  HubData = "";     //清空HUB8735資料
  audio.loop();     //語音播放指令
  //if(!Auto)
  BT_Read = "";
  //delay(100);
  
}

//加速動畫副程式
void speedup() {
  if (millis() - accTime >= 1000) {     //每一秒切換一次加速動畫
    accTime = millis();
    acc += 1;
    if (acc % 4 == 0) {
      for (int i = 0; i < 14; i++) {
        pixels.setPixelColor(accel1[i], pixels.Color(R, G, motoraccel[accel1[i]][2]));
      }
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel5[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (acc % 4 == 1) {
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel2[i], pixels.Color(R, G, motoraccel[accel2[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (acc % 4 == 2) {
      for (int i = 0; i < 26; i++) {
        pixels.setPixelColor(accel3[i], pixels.Color(R, G, motoraccel[accel3[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (acc % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(accel4[i], pixels.Color(R, G, motoraccel[accel4[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//加速+左轉(方向燈)副程式
void speedupturnleft() {
  if (millis() - accTime >= 1000) {     //每一秒切換一次加速+左轉動畫
    accTime = millis();
    acc += 1;
    if (acc % 4 == 0) {
      for (int i = 0; i < 14; i++) {
        pixels.setPixelColor(accel1[i], pixels.Color(motoraccel[accel1[i]][0], motoraccel[accel1[i]][1], motoraccel[accel1[i]][2]));
      }
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(left[le1[i]][0], left[le1[i]][1], left[le1[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (acc % 4 == 1) {
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel2[i], pixels.Color(motoraccel[accel2[i]][0], motoraccel[accel2[i]][1], motoraccel[accel2[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("1");
    }
    if (acc % 4 == 2) {
      for (int i = 0; i < 26; i++) {
        pixels.setPixelColor(accel3[i], pixels.Color(motoraccel[accel3[i]][0], motoraccel[accel3[i]][1], motoraccel[accel3[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(left[le1[i]][0], left[le1[i]][1], left[le1[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (acc % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(accel4[i], pixels.Color(motoraccel[accel4[i]][0], motoraccel[accel4[i]][1], motoraccel[accel4[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//加速+右轉(方向燈)副程式
void speedupturnright() {               //每一秒切換加速+右轉動畫
  if (millis() - accTime >= 1000) {
    accTime = millis();
    acc += 1;
    if (acc % 4 == 0) {
      for (int i = 0; i < 14; i++) {
        pixels.setPixelColor(accel1[i], pixels.Color(motoraccel[accel1[i]][0], motoraccel[accel1[i]][1], motoraccel[accel1[i]][2]));
      }
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(right[re1[i]][0], right[re1[i]][1], right[re1[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (acc % 4 == 1) {
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel2[i], pixels.Color(motoraccel[accel2[i]][0], motoraccel[accel2[i]][1], motoraccel[accel2[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("1");
    }
    if (acc % 4 == 2) {
      for (int i = 0; i < 26; i++) {
        pixels.setPixelColor(accel3[i], pixels.Color(motoraccel[accel3[i]][0], motoraccel[accel3[i]][1], motoraccel[accel3[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(right[re1[i]][0], right[re1[i]][1], right[re1[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (acc % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(accel4[i], pixels.Color(motoraccel[accel4[i]][0], motoraccel[accel4[i]][1], motoraccel[accel4[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}



//加速+左偏移副程式
void speedupleanleft() {           //每一秒切換加速+左偏動畫
  if (millis() - accTime >= 1000) {
    accTime = millis();
    acc += 1;
    if (acc % 4 == 0) {
      for (int i = 0; i < 14; i++) {
        pixels.setPixelColor(accel1[i], pixels.Color(motoraccel[accel1[i]][0], motoraccel[accel1[i]][1], motoraccel[accel1[i]][2]));
      }
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (acc % 4 == 1) {
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel2[i], pixels.Color(motoraccel[accel2[i]][0], motoraccel[accel2[i]][1], motoraccel[accel2[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo1[i], pixels.Color(leftoffset[lo1[i]][0], leftoffset[lo1[i]][1], leftoffset[lo1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (acc % 4 == 2) {
      for (int i = 0; i < 26; i++) {
        pixels.setPixelColor(accel3[i], pixels.Color(motoraccel[accel3[i]][0], motoraccel[accel3[i]][1], motoraccel[accel3[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo2[i], pixels.Color(leftoffset[lo2[i]][0], leftoffset[lo2[i]][1], leftoffset[lo2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (acc % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(accel4[i], pixels.Color(motoraccel[accel4[i]][0], motoraccel[accel4[i]][1], motoraccel[accel4[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo3[i], pixels.Color(leftoffset[lo3[i]][0], leftoffset[lo3[i]][1], leftoffset[lo3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//右偏
void leanright() {
  if (millis() - roTime >= 1000) {
    roTime = millis();
    ro += 1;
    if (ro % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (ro % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro1[i], pixels.Color(R, G, rightoffset[ro1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (ro % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro2[i], pixels.Color(R, G, rightoffset[ro2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (ro % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro3[i], pixels.Color(R, G, rightoffset[ro3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}
//加速+右偏移副程式
void speedupleanright() {                //每一秒切換加速+右偏動畫
  if (millis() - accTime >= 1000) {
    accTime = millis();
    acc += 1;
    if (acc % 4 == 0) {
      for (int i = 0; i < 14; i++) {
        pixels.setPixelColor(accel1[i], pixels.Color(motoraccel[accel1[i]][0], motoraccel[accel1[i]][1], motoraccel[accel1[i]][2]));
      }
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (acc % 4 == 1) {
      for (int i = 0; i < 20; i++) {
        pixels.setPixelColor(accel2[i], pixels.Color(motoraccel[accel2[i]][0], motoraccel[accel2[i]][1], motoraccel[accel2[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro1[i], pixels.Color(rightoffset[ro1[i]][0], rightoffset[ro1[i]][1], rightoffset[ro1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (acc % 4 == 2) {
      for (int i = 0; i < 26; i++) {
        pixels.setPixelColor(accel3[i], pixels.Color(motoraccel[accel3[i]][0], motoraccel[accel3[i]][1], motoraccel[accel3[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro2[i], pixels.Color(rightoffset[ro2[i]][0], rightoffset[ro2[i]][1], rightoffset[ro2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (acc % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(accel4[i], pixels.Color(motoraccel[accel4[i]][0], motoraccel[accel4[i]][1], motoraccel[accel4[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro3[i], pixels.Color(rightoffset[ro3[i]][0], rightoffset[ro3[i]][1], rightoffset[ro3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//減速動畫副程式
void speeddown() {                   //每一秒切換減速動畫
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 4 == 0) {
      for (int i = 0; i < 10; i++) {
        pixels.setPixelColor(slow1[i], pixels.Color(R, G, motoslow[slow1[i]][2]));
      }
      for (int i = 0; i < 18; i++) {
        pixels.setPixelColor(slow5[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(slow2[i], pixels.Color(R, G, motoslow[slow2[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (slo % 4 == 2) {
      for (int i = 0; i < 22; i++) {
        pixels.setPixelColor(slow3[i], pixels.Color(R, G, motoslow[slow3[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (slo % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(slow4[i], pixels.Color(R, G, motoslow[slow4[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//左轉
void turnleft() {
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 2 == 0) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(R, G, left[le1[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 2 == 1) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("1");
    }
  }
}

//右轉
void turnright() {
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    // Iterate through all elements of re1[]
    for (int i = 0; i < sizeof(re1)/sizeof(re1[0]); i++) {
      if (slo % 2 == 0) {
        pixels.setPixelColor(re1[i], pixels.Color(R, G, right[re1[i]][2]));
      } else {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
    }
    // Show pixels after updating colors
    pixels.show();
    // Debugging output
    Serial.println(slo % 2);
  }
}
//減速 + 左轉(方向燈)副程式
void speeddownturnleft() {         //每一秒切換減速+左轉動畫
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 4 == 0) {
      for (int i = 0; i < 10; i++) {
        pixels.setPixelColor(slow1[i], pixels.Color(motoslow[slow1[i]][0], motoslow[slow1[i]][1], motoslow[slow1[i]][2]));
      }
      for (int i = 0; i < 18; i++) {
        pixels.setPixelColor(slow5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(left[le1[i]][0], left[le1[i]][1], left[le1[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(slow2[i], pixels.Color(motoslow[slow2[i]][0], motoslow[slow2[i]][1], motoslow[slow2[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("1");
    }
    if (slo % 4 == 2) {
      for (int i = 0; i < 22; i++) {
        pixels.setPixelColor(slow3[i], pixels.Color(motoslow[slow3[i]][0], motoslow[slow3[i]][1], motoslow[slow3[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(left[le1[i]][0], left[le1[i]][1], left[le1[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (slo % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(slow4[i], pixels.Color(motoslow[slow4[i]][0], motoslow[slow4[i]][1], motoslow[slow4[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//減速 + 右轉(方向燈)副程式
void speeddownturnright() {          //每一秒切換減速+右轉動畫
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 4 == 0) {
      for (int i = 0; i < 10; i++) {
        pixels.setPixelColor(slow1[i], pixels.Color(motoslow[slow1[i]][0], motoslow[slow1[i]][1], motoslow[slow1[i]][2]));
      }
      for (int i = 0; i < 18; i++) {
        pixels.setPixelColor(slow5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(right[re1[i]][0], right[re1[i]][1], right[re1[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(slow2[i], pixels.Color(motoslow[slow2[i]][0], motoslow[slow2[i]][1], motoslow[slow2[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("1");
    }
    if (slo % 4 == 2) {
      for (int i = 0; i < 22; i++) {
        pixels.setPixelColor(slow3[i], pixels.Color(motoslow[slow3[i]][0], motoslow[slow3[i]][1], motoslow[slow3[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(right[re1[i]][0], right[re1[i]][1], right[re1[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (slo % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(slow4[i], pixels.Color(motoslow[slow4[i]][0], motoslow[slow4[i]][1], motoslow[slow4[i]][2]));
      }
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//左偏
void leanleft() {
  if (millis() - loTime >= 1000) {
    loTime = millis();
    lo += 1;
    if (lo % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (lo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo1[i], pixels.Color(R, G, leftoffset[lo1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (lo % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo2[i], pixels.Color(R, G, leftoffset[lo2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (lo % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo3[i], pixels.Color(R, G, leftoffset[lo3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}
//減速+左偏移副程式
void speeddownleanleft() {         //每一秒切換減速+左偏動畫
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 4 == 0) {
      for (int i = 0; i < 10; i++) {
        pixels.setPixelColor(slow1[i], pixels.Color(motoslow[slow1[i]][0], motoslow[slow1[i]][1], motoslow[slow1[i]][2]));
      }
      for (int i = 0; i < 18; i++) {
        pixels.setPixelColor(slow5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(slow2[i], pixels.Color(motoslow[slow2[i]][0], motoslow[slow2[i]][1], motoslow[slow2[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo1[i], pixels.Color(leftoffset[lo1[i]][0], leftoffset[lo1[i]][1], leftoffset[lo1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (slo % 4 == 2) {
      for (int i = 0; i < 22; i++) {
        pixels.setPixelColor(slow3[i], pixels.Color(motoslow[slow3[i]][0], motoslow[slow3[i]][1], motoslow[slow3[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo2[i], pixels.Color(leftoffset[lo2[i]][0], leftoffset[lo2[i]][1], leftoffset[lo2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (slo % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(slow4[i], pixels.Color(motoslow[slow4[i]][0], motoslow[slow4[i]][1], motoslow[slow4[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo3[i], pixels.Color(leftoffset[lo3[i]][0], leftoffset[lo3[i]][1], leftoffset[lo3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//減速+右偏移副程式
void speeddownleanright() {         //每一秒切換減速+右偏動畫
  if (millis() - slowTime >= 1000) {
    slowTime = millis();
    slo += 1;
    if (slo % 4 == 0) {
      for (int i = 0; i < 10; i++) {
        pixels.setPixelColor(slow1[i], pixels.Color(motoslow[slow1[i]][0], motoslow[slow1[i]][1], motoslow[slow1[i]][2]));
      }
      for (int i = 0; i < 18; i++) {
        pixels.setPixelColor(slow5[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
      }
      pixels.show();
      Serial.println("0");
    }
    if (slo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(slow2[i], pixels.Color(motoslow[slow2[i]][0], motoslow[slow2[i]][1], motoslow[slow2[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro1[i], pixels.Color(rightoffset[ro1[i]][0], rightoffset[ro1[i]][1], rightoffset[ro1[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (slo % 4 == 2) {
      for (int i = 0; i < 22; i++) {
        pixels.setPixelColor(slow3[i], pixels.Color(motoslow[slow3[i]][0], motoslow[slow3[i]][1], motoslow[slow3[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro2[i], pixels.Color(rightoffset[ro2[i]][0], rightoffset[ro2[i]][1], rightoffset[ro2[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (slo % 4 == 3) {
      for (int i = 0; i < 32; i++) {
        pixels.setPixelColor(slow4[i], pixels.Color(motoslow[slow4[i]][0], motoslow[slow4[i]][1], motoslow[slow4[i]][2]));
      }
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro3[i], pixels.Color(rightoffset[ro3[i]][0], rightoffset[ro3[i]][1], rightoffset[ro3[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//半亮 + 左偏副程式
void leanleftnormal() {            //每一秒切換半亮+左偏動畫
  if (millis() - loTime >= 1000) {
    loTime = millis();
    lo += 1;
    if (lo % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (lo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo1[i], pixels.Color(R, G, leftoffset[lo1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (lo % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo2[i], pixels.Color(R, G, leftoffset[lo2[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (lo % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo3[i], pixels.Color(R, G, leftoffset[lo3[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//半亮 + 右偏移動畫
void leanrightnormal() {          //每一秒切換半亮+右偏動畫
  if (millis() - roTime >= 1000) {
    roTime = millis();
    ro += 1;
    if (ro % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (ro % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro1[i], pixels.Color(R, G, rightoffset[ro1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (ro % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro2[i], pixels.Color(R, G, rightoffset[ro2[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (ro % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro3[i], pixels.Color(R, G, rightoffset[ro3[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//煞車 + 左偏移副程式
void leanleftbrake() {           //每一秒切換煞車+左偏動畫
  if (millis() - loTime >= 1000) {
    loTime = millis();
    lo += 1;
    if (lo % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(lo4[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (lo % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo1[i], pixels.Color(leftoffset[lo1[i]][0], leftoffset[lo1[i]][1], leftoffset[lo1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (lo % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo2[i], pixels.Color(leftoffset[lo2[i]][0], leftoffset[lo2[i]][1], leftoffset[lo2[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (lo % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(lo3[i], pixels.Color(leftoffset[lo3[i]][0], leftoffset[lo3[i]][1], leftoffset[lo3[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//煞車+右偏副程式
void leanrightbrake() {           //每一秒切換煞車+右偏動畫
  if (millis() - roTime >= 1000) {
    roTime = millis();
    ro += 1;
    if (ro % 4 == 0) {
      for (int i = 0; i < 48; i++) {
        pixels.setPixelColor(ro4[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("0");
    }
    if (ro % 4 == 1) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro1[i], pixels.Color(rightoffset[ro1[i]][0], rightoffset[ro1[i]][1], rightoffset[ro1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("1");
    }
    if (ro % 4 == 2) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro2[i], pixels.Color(rightoffset[ro2[i]][0], rightoffset[ro2[i]][1], rightoffset[ro2[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("2");
    }
    if (ro % 4 == 3) {
      for (int i = 0; i < 16; i++) {
        pixels.setPixelColor(ro3[i], pixels.Color(rightoffset[ro3[i]][0], rightoffset[ro3[i]][1], rightoffset[ro3[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
      Serial.println("3");
    }
  }
}

//半亮+左轉副程式
void turnleftnormal() {            //每一秒切換半亮+左轉動畫
  if (millis() - leTime >= 1000) {
    leTime = millis();
    le += 1;
    if (le % 2 == 0) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(R, G, left[le1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
    }
    if (le % 2 == 1) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
    }
  }
}

//半亮+右轉副程式
void turnrightnormal() {          //每一秒切換半亮+右轉動畫
  if (millis() - reTime >= 1000) {
    reTime = millis();
    re += 1;
    if (re % 2 == 0) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(R, G, right[re1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
    }
    if (re % 2 == 1) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(R, 0, normal[brak[i]][2]));
      }
      pixels.show();
    }
  }
}

//煞車+左轉副程式
void turnleftbrake() {             //每一秒切換煞車+左轉動畫
  if (millis() - leTime >= 1000) {
    leTime = millis();
    le += 1;
    if (le % 2 == 0) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(left[le1[i]][0], left[le1[i]][1], left[le1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
    }
    if (le % 2 == 1) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(le1[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
    }
  }
}

//煞車+右轉副程式
void turnrightbrake() {           //每一秒切換煞車+右轉動畫
  if (millis() - reTime >= 1000) {
    reTime = millis();
    re += 1;
    if (re % 2 == 0) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(right[re1[i]][0], right[re1[i]][1], right[re1[i]][2]));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
    }
    if (re % 2 == 1) {
      for (int i = 0; i < 40; i++) {
        pixels.setPixelColor(re1[i], pixels.Color(0, 0, 0));
      }
      for (int i = 0; i < 152; i++) {
        pixels.setPixelColor(brak[i], pixels.Color(motobrake[brak[i]][0], motobrake[brak[i]][1], motobrake[brak[i]][2]));
      }
      pixels.show();
    }
  }
}

//六軸偵測偏移
void motion() {
  if (millis() - mpuTime >= 100 && audop == false) {
    mpuTime = millis();
    mpu6050.update();

    // 读取加速度计和陀螺仪数据
    float ax = mpu6050.getAccX();
    float ay = mpu6050.getAccY();
    float az = mpu6050.getAccZ();
    float gx = mpu6050.getGyroX();
    float gy = mpu6050.getGyroY();
    float gz = mpu6050.getGyroZ();

    // 计算角度（示例中仅展示了加速度计的角度，你也可以考虑使用陀螺仪的数据进行更准确的角度计算）
    roll = atan2(ay, az) * 180 / PI;
    pitch = atan2(-ax, sqrt(ay * ay + az * az)) * 180 / PI;


    // 打印角度值
    Serial.print("Roll: ");
    Serial.print(roll);
    Serial.print(" Pitch: ");
    Serial.println(pitch);
  }
}

//HUB8735偵測副程式
void Detect() {
  if (!audop && hubdetect == false) {  //當音檔播放完畢&&毫米波雷達位做動完&&UART中斷被啟用時
    while (HubSerial.available() >= 0 && Hub_counter < 3) {
      str = HubSerial.read();
      HubData += str;
      Hub_counter += 1;
    }
    Serial.println(HubData);
    delay(100);

    /*資料格式"數字,方向"*/
    /*1=機車  2=公車  3=卡車  4=汽車*/
    /*L=左後方  R=右後方  M=後方*/
    if (HubData == "1,L") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "LeftMotor.mp3");  // 重新連接並播放音頻檔案
      BT.println("104");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "1,R") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "RightMotor.mp3"); // 重新連接並播放音頻檔案
      BT.println("105");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "1,M") {
      Auto = true;
     // audop = true;
      //audio.connecttoFS(SD, "BackMotor.mp3");  // 重新連接並播放音頻檔案
      BT.println("106");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "2,L") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "LeftBus.mp3");    // 重新連接並播放音頻檔案
      BT.println("107"); 
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "2,R") {
      Auto = true;
     // audop = true;
      //audio.connecttoFS(SD, "RightBus.mp3");   // 重新連接並播放音頻檔案
      BT.println("108");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "2,M") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "BackBus.mp3");    // 重新連接並播放音頻檔案
      BT.println("109");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "3,L") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "LeftTruck.mp3");  // 重新連接並播放音頻檔案
      BT.println("110");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "3,R") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "RightTruck.mp3"); // 重新連接並播放音頻檔案
      BT.println("111");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "3,M") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "BackTruck.mp3");  // 重新連接並播放音頻檔案
      BT.println("112");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "4,L") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "LeftCar.mp3");    // 重新連接並播放音頻檔案
      BT.println("113");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "4,R") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "RightCar.mp3");   // 重新連接並播放音頻檔案
      BT.println("114");
      //delay(2000);
      while (HubSerial.read() >= 0) {}           //將HUB8735模組的緩衝區資料清空
    }
    else if (HubData == "4,M") {
      Auto = true;
      //audop = true;
      //audio.connecttoFS(SD, "BackCar.mp3");   // 重新連接並播放音頻檔案
      BT.println("115");
      //delay(2000);
      while (HubSerial.read() >= 0) {}          //將HUB8735模組的緩衝區資料清空
    }
  }
}

//毫米波雷達偵測副程式
void SpotDetect() {                           //每50毫秒偵測一次&&音檔播放完畢&&UART中斷被啟用時
  if ( audop == false && ladarop == true) {
    //Time = millis();
    while (PH12.available() > 0 && PH_Count < 14) {
      data = PH12.read();                     // 雷達初始資料讀取
      PH12_feedback += data;                  // 雷達回饋資料 = 雷達初始資料
      PH_Count++;                             // 雷達資料Byte計數+1
    }
    delay(50);
    //將ascii碼解析16進制資料
    /*for (int i = 0; i < PH_Count; i++) {
      Data += String(PH12_feedback[i], HEX);  //將雷達回饋資料解析轉成16進制資料
      Data += " ";
    }
    Serial.println(Data);*/
    //運算距離、方向、角度等資料
    if (PH_Count == 14 ) {
      if (String(PH12_feedback[0], HEX) == "55" && String(PH12_feedback[1], HEX) == "aa") {
        Direction = String(PH12_feedback[5], HEX).toInt();
        angle = String(PH12_feedback[6], DEC).toInt();
        val3 = String(PH12_feedback[10], HEX) += String(PH12_feedback[9], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[1], HEX) == "55" && String(PH12_feedback[2], HEX) == "aa") {
        Direction = String(PH12_feedback[6], HEX).toInt();
        angle = String(PH12_feedback[7], DEC).toInt();
        val3 = String(PH12_feedback[11], HEX) += String(PH12_feedback[10], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[2], HEX) == "55" && String(PH12_feedback[3], HEX) == "aa") {
        Direction = String(PH12_feedback[7], HEX).toInt();
        angle = String(PH12_feedback[8], DEC).toInt();
        val3 = String(PH12_feedback[12], HEX) += String(PH12_feedback[11], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[3], HEX) == "55" && String(PH12_feedback[4], HEX) == "aa") {
        Direction = String(PH12_feedback[8], HEX).toInt();
        angle = String(PH12_feedback[9], DEC).toInt();
        val3 = String(PH12_feedback[13], HEX) += String(PH12_feedback[12], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[4], HEX) == "55" && String(PH12_feedback[5], HEX) == "aa") {
        Direction = String(PH12_feedback[9], HEX).toInt();
        angle = String(PH12_feedback[10], DEC).toInt();
        val3 = String(PH12_feedback[0], HEX) += String(PH12_feedback[13], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[5], HEX) == "55" && String(PH12_feedback[6], HEX) == "aa") {
        Direction = String(PH12_feedback[10], HEX).toInt();
        angle = String(PH12_feedback[11], DEC).toInt();
        val3 = String(PH12_feedback[1], HEX) += String(PH12_feedback[0], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); //將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[6], HEX) == "55" && String(PH12_feedback[7], HEX) == "aa") {
        Direction = String(PH12_feedback[11], HEX).toInt();
        angle = String(PH12_feedback[12], DEC).toInt();
        val3 = String(PH12_feedback[2], HEX) += String(PH12_feedback[1], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[7], HEX) == "55" && String(PH12_feedback[8], HEX) == "aa") {
        Direction = String(PH12_feedback[12], HEX).toInt();
        angle = String(PH12_feedback[13], DEC).toInt();
        val3 = String(PH12_feedback[3], HEX) += String(PH12_feedback[2], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[8], HEX) == "55" && String(PH12_feedback[9], HEX) == "aa") {
        Direction = String(PH12_feedback[13], HEX).toInt();
        angle = String(PH12_feedback[0], DEC).toInt();
        val3 = String(PH12_feedback[4], HEX) += String(PH12_feedback[3], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[9], HEX) == "55" && String(PH12_feedback[10], HEX) == "aa") {
        Direction = String(PH12_feedback[0], HEX).toInt();
        angle = String(PH12_feedback[1], DEC).toInt();
        val3 = String(PH12_feedback[5], HEX) += String(PH12_feedback[4], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[10], HEX) == "55" && String(PH12_feedback[11], HEX) == "aa") {
        Direction = String(PH12_feedback[1], HEX).toInt();
        angle = String(PH12_feedback[2], DEC).toInt();
        val3 = String(PH12_feedback[6], HEX) += String(PH12_feedback[5], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[11], HEX) == "55" && String(PH12_feedback[12], HEX) == "aa") {
        Direction = String(PH12_feedback[2], HEX).toInt();
        angle = String(PH12_feedback[3], DEC).toInt();
        val3 = String(PH12_feedback[7], HEX) += String(PH12_feedback[6], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[12], HEX) == "55" && String(PH12_feedback[13], HEX) == "aa") {
        Direction = String(PH12_feedback[3], HEX).toInt();
        angle = String(PH12_feedback[4], DEC).toInt();
        val3 = String(PH12_feedback[8], HEX) += String(PH12_feedback[7], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      if (String(PH12_feedback[13], HEX) == "55" && String(PH12_feedback[0], HEX) == "aa") {
        Direction = String(PH12_feedback[4], HEX).toInt();
        angle = String(PH12_feedback[5], DEC).toInt();
        val3 = String(PH12_feedback[9], HEX) += String(PH12_feedback[8], HEX);
        char *ptr; // 定義一個指針
        dist = strtol(val3.c_str(), &ptr, 16); // 將16進位字串轉換為10進位整數
      }
      Serial.print("方向");
      if (Direction >= 80)
        Serial.println("右");
      else
        Serial.println("左");
      Serial.print("角度");
      Serial.println(angle);
      Serial.print("dist=");
      Serial.println(dist);
      while (PH12.read() >= 0) {}
    }
    if (dist != 0) {  //當距離不等於0
      Auto = true;
      if (Direction >= 80) {  //方向等於右邊
        if (distancecheck == false) {     //距離小於7公尺
          //audop = true;
          hubdetect = true;
          BT.println("101");
          delay(2000);
          //audio.connecttoFS(SD, "Rightseven.mp3");  // 重新連接並播放音頻檔案
          hubdetect = false;
          while (PH12.read() >= 0) {}               //將HUB8735模組的緩衝區資料清空
        }
        else if (distancecheck == true) {     //距離在7公尺與14公尺之間
          //audop = true;
          hubdetect = true;
          BT.println("103");
          delay(2000);
          //audio.connecttoFS(SD, "Rightfourteen.mp3");// 重新連接並播放音頻檔案
          hubdetect = false;
          while (PH12.read() >= 0) {}                //將毫米波雷達的緩衝區資料清空
        }
      }
      else if (Direction < 80) {  //方向等於左邊
        if (distancecheck == false ) {        //距離小於7公尺
          //audop = true;
          hubdetect = true;
          BT.println("100");
          delay(2000);
          //audio.connecttoFS(SD, "Leftseven.mp3");  // 重新連接並播放音頻檔案
          hubdetect = false;
          while (PH12.read() >= 0) {}              //將毫米波雷達的緩衝區資料清空
        }
        else if (distancecheck == true) {   //距離在7公尺與14公尺之間
          //audop = true;
          hubdetect = true;
          BT.println("102");
          delay(2000);
          //audio.connecttoFS(SD, "Leftfourteen.mp3");  // 重新連接並播放音頻檔案
          hubdetect = false;
          while (PH12.read() >= 0) {}              //將毫米波雷達的緩衝區資料清空
        }
      }
    }
    //清空資料
    /*PH_Count = 0;
    PH12_feedback = "";
    PH12.flush(PH12_feedback);
    Data = "";
    val3 = "";
    dist = 0;*/
  }
}


// 事件處理函式
void audio_info(const char *info) {
  printf("聲音資訊：%s\n", info);
}
void audio_showstation(const char *info) {
  printf("電台   ：%s\n", info);
}
void audio_showstreaminfo(const char *info) {
  printf("串流資訊：%s\n", info);
}
void audio_showstreamtitle(const char *info) {
  printf("串流標題：%s\n", info);
}
/*音頻播放完畢觸發*/
void audio_eof_mp3(const char *info) {
  printf("播放完畢：%s\n", info);
  audop = false;                      //音頻禁能
}
